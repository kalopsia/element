@import '../_globals.scss';
@import '../_naming.scss';
@import '../_functions.scss';
@import '../_mixins.scss';
//@import '../_vr.scss';

//@todo

// Default Variables
// --------------------------------------------------
  $module: false !default;

  // $...-exclude variable provides control under excluding module's components
  $module-exclude: false !default;
  // $...-include variable must be contained all logically separated components that will be used within module.
  // The variable automatically excludes components that are specified above.
  $module-include: diff-list((
      //component1, component2, component3
      ), $module-exclude) !default;

  // Let's imagine, we have 3 components (line-height, text-decoration, font-styling) within the module named "text".
  // We can specify not to include line-height to generating in the module's output by default. If so, our code
  // is as follows:
  //
  // $text-exclude: line-height !default;
  // $text-include: diff-list((
  //    line-height, text-decoration, font-styling
  //    ), $text-exclude) !default;
  //
  // When module will be formed and used anywhere we can explicitly define what we want to use within (without thinking
  // of what is excluded or included moreover), for example:
  //
  // $text-include: font-styling;
  // @import 'path/to/_text.scss'; <- now module will generate only font-styling component

  //code


// Mixins & Functions
// --------------------------------------------------

  //code


// Output Styles
// --------------------------------------------------
@if $module or $module==static {

  @if in-list(component1, $module-include) {
    //component1 has only non-responsive styles
  }

  @if in-list(component3, $module-include) {
    //component3 has responsive and non-responsive styles
  }

}

@if $module or $module==responsive {

  @if in-list(component2, $module-include) {
    //component2 has only responsive styles
  }

  @if in-list(component3, $module-include) {
    //the responsive part of component3
  }

}

$module: false;

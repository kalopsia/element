// Index getter
// ------------------------------
// returns list - positions of a values in $list-1 that exists in $list-2
@function indexes($list-1, $list-2) {
  $output: () !global;

  @each $value-of-2 in $list-2 {
    $output: append($output, index($list-1, $value-of-2)) !global;
  }

  @return $output;
}


// Nth getter
// ------------------------------
// returns list - a specific items in a list-1 by list of indexes
@function nths($list, $indexes) {
  $output: () !global;

  @each $index in $indexes {
    @if $index {
      $output: append($output, nth($list, $index)) !global;
    }
  }

  @return $output;
}

// List Filter
// ------------------------------
// excludes null values from list 1 or from both list 1 and 2
// (second list's values excludes according to list 1)
@function filter-list($list-1, $list-2:null)
{
  $i: 1 !global;
  $output: () !global;
  @while $i <= length($list-1) {
    @if nth($list-1, $i) {
      @if $list-2 {
        $output: append($output, nth($list-2, $i)) !global;
      }
      @else       {
        $output: append($output, nth($list-1, $i)) !global;
      }
    }

    $i: $i + 1 !global;
  }

  @return $output;
}

// Map Filter
// ------------------------------
// excludes null values from map 1 or from both list 1 and 2
// (second map's values excludes according to map 1)
@function filter-map($map-1, $map-2:null)
{
  $i: 1 !global;
  $output: () !global;
  @while $i <= length($map-1) {
    $array: nth($map-1, $i);
    $key: nth($array, 1);
    $value: nth($array, 2);

    @if $key!=null and $value!=null {
      @if $map-2 {
        $array: nth($map-2, $i);
        $key: nth($array, 1);
        $value: nth($array, 2);

        $output: map-merge($output, ($key: $value)) !global;
      }
      @else {
        $output: map-merge($output, ($key: $value)) !global;
      }
    }

    $i: $i + 1 !global;
  }

  @return $output;
}

// Exclude value by name from list
// ------------------------------
@function remove-value($list, $value:null, $separator:null)
{
  $output: () !global;
//  @if $value {
    @each $val-of-first in $list {
      @if $val-of-first != $value {
        $output: append($output, $val-of-first, $separator) !global;
      }
    }

    @return $output;
//  }
//  @else {
//    @return $list;
//  }
}

// Remove value by index from list
// ------------------------------
@function remove($list, $index:null, $separator:null)
{
  $output: () !global;
  @if $index {
    @each $val-of-first in $list {
      @if $val-of-first != $index {
        $output: append($output, $val-of-first, $separator) !global;
      }
    }

    @return $output;
  }
  @else {
    @return $list;
  }
}

// Computes the difference of lists
// ------------------------------
// subtract list-2 from list-1
@function diff-list($list-1, $list-2:null)
{
  @if $list-2 {
    @each $val-of-first in $list-1 {
      @each $val-of-second in $list-2 {
        @if $val-of-first == $val-of-second {
          $list-1: remove-value($list-1, $val-of-first);
        }
      }
    }

    @return $list-1;
  }
  @else {
    @return $list-1;
  }
}

// List Reordering
// ------------------------------
// reverse list order
@function reverse-list($list)
{
  $reverse-list: () !global;
  $i: length($list) !global;

  @while $i >= 1 {
    $reverse-list: append($reverse-list, nth($list, $i)) !global;
    $i: $i - 1 !global;
  }
  @return $reverse-list;
}

// Dash Appender
// ------------------------------
// just append dash to value
@function append-dash($value:null)
{
  @return if($value, unquote('#{$value}-'), null);
}
// Dash Appender (with validation)
// ------------------------------
// Appends dash if value not equal to $exception
@function _($value:null, $exception:default) {
  @return if($value!=$exception, append-dash($value), null);
}

// Dash Prepender
// ------------------------------
// just prepend dash to value
@function prepend-dash($value:null)
{
  @return if($value, unquote("-#{$value}"), null);
}
// Dash Prepender (with validation)
// ------------------------------
// Prepends dash if value not equal to $exception
@function __($value:null, $exception:default) {
  @return if($value!=$exception, prepend-dash($value), null);
}

// Grid Settings Calculator
// ------------------------------
// $columns - number of grid columns
// $calc-method - method based on what will be made calculation
// $calc-data - input data for calculation according to selected method
// @return list of 1:columns number, 2:column width, 3:gap width
@function calc-grid($columns, $calc-method, $calc-data)
{
  $column: null;
  $gap: null;

  // Gaps By Padding
  @if $calc-method==column-gap {
    $px-column: nth($calc-data,1);
    $px-gap: nth($calc-data,2);
    $px-row: ($columns * $px-column) + ($px-gap * ($columns - 1));
    $percent-gap: percentage($px-gap/$px-row);

    $column: 100% / $columns;
    $gap: $percent-gap/2;
  }
  @else if $calc-method==gap {
    $gap: $calc-data;

    $column: 100% / $columns;
    $gap: $gap/2;
  }
  @else if $calc-method==column {
    $ratio: $calc-data;

    $column: 100% / $columns;
    $gap: (100% - ($ratio * $columns)) / $columns;
  }

  // Gaps by Margin (deprecated)

  // Gapless (deprecated)

  @return ($columns, $column, $gap);
}

// Remove Value's Unit
// -------------------
@function ununit($value) {
  @if unitless($value)              { @return $value; }
  @else if unit($value) == '%'      { @return $value / 1%; }
  @else if unit($value) == 'px'     { @return $value / 1px; }
  @else if unit($value) == 'pt'     { @return $value / 1pt; }
  @else if unit($value) == 'em'     { @return $value / 1em; }
  @else if unit($value) == 'rem'    { @return $value / 1rem; }
}

// Append Specific Unit
// --------------------
@function setunit($value, $unit: integer) {
  @if $unit == integer              { @return ununit($value); }
  @else if $unit == '%'             { @return ununit($value)+0%; }
  @else if $unit == 'px'            { @return ununit($value)+0px; }
  @else if $unit == 'pt'            { @return ununit($value)+0pt; }
  @else if $unit == 'em'            { @return ununit($value)+0em; }
  @else if $unit == 'rem'           { @return ununit($value)+0rem; }
}

// Unit Converter
// --------------
@function _tounit($value, $unit: null, $pixel-size: 16, $ppi-ratio: 72/96) {

  @if $unit {
      //PX TO UNIT
    @if unit($value) == 'px' {
      @if $unit == '%'              { @return setunit($value * 100 / $pixel-size, '%'); }
      @else if $unit == 'px'        { @return $value; }
      @else if $unit == 'pt'        { @return setunit($value * $ppi-ratio, pt); }
      @else if $unit == 'em'        { @return setunit($value / $pixel-size, em); }
      @else if $unit == 'rem'       { @return setunit($value / $pixel-size, rem); }
      @else if $unit == 'unitless'  { @return setunit($value / $pixel-size); }
    }
    //PERCENT TO UNIT
    @else if unit($value) == '%' {
      $value: round($value * $pixel-size/100) / ($pixel-size/100);
      @if $unit == '%'              { @return $value; }
      @else if $unit == 'px'        { @return setunit($value * $pixel-size/100, px); }
      @else if $unit == 'pt'        { @return setunit($value * $pixel-size/100 * $ppi-ratio, pt); }
      @else if $unit == 'em'        { @return setunit($value / 100, em); }
      @else if $unit == 'rem'       { @return setunit($value / 100, rem); }
      @else if $unit == 'unitless'  { @return setunit($value / 100); }
    }
      //EM, REM, UNITLESS TO UNIT
    @else if unit($value) == 'em' or unit($value) == 'rem' or unitless($value) {
      @if $unit == '%'              { @return setunit(ununit($value) * 100, '%'); }
      @else if $unit == 'px'        { @return setunit($value * $pixel-size, px); } //round?
      @else if $unit == 'pt'        { @return setunit(ununit($value) * $pixel-size * $ppi-ratio, pt); }
      @else if $unit == 'em'        { @return setunit($value, em); }
      @else if $unit == 'rem'       { @return setunit($value, rem); }
      @else if $unit == 'unitless'  { @return setunit($value); }
    }
      //PT TO UNIT
    @else if unit($value) == 'pt' {
      @if $unit == '%'              { @return setunit(ununit($value) / $ppi-ratio * 100/ununit($pixel-size), '%'); }
      @else if $unit == 'px'        { @return setunit(round($value / $ppi-ratio), px); }
      @else if $unit == 'pt'        { @return $value; }
      @else if $unit == 'em'        { @return setunit(ununit($value) / $ppi-ratio / $pixel-size, em); }
      @else if $unit == 'rem'       { @return setunit(ununit($value) / $ppi-ratio / $pixel-size, rem); }
      @else if $unit == 'unitless'  { @return setunit(ununit($value) / $ppi-ratio / $pixel-size); }
    }
    @else {
      @return $value;
    }
  }
  @else {
    @return $value;
    //@return ununit($value);
  }
}

//trick to get always integer pixel value at the end of browser rendering
//@todo add $round option to get this trick
@function tounit($value, $unit: null) {
  @return _tounit(round(_tounit($value, px)), $unit); //slow
//  @return _tounit($value, $unit); //speedup
}
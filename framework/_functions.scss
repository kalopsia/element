// Index getter
// ------------------------------
// returns list - positions of a values in $list-1 that exists in $list-2
@function indexes($list-1, $list-2) {
  $output: () !global;

  @each $value-of-2 in $list-2 {
    $output: append($output, index($list-1, $value-of-2)) !global;
  }

  @return $output;
}


// Nth getter
// ------------------------------
// returns list - a specific items in a list-1 by list of indexes
@function nths($list, $indexes) {
  $output: () !global;

  @each $index in $indexes {
    @if $index {
      $output: append($output, nth($list, $index)) !global;
    }
  }

  @return $output;
}


// Dash Appender (with validation)
// ------------------------------
// Appends dash for given $value if $value isn't equal to $exception
// dash can be replaced by any other character by $postfix
@function _($value:null, $exception:default, $postfix: '-') {
  @return if($value!=$exception, if($value, unquote('#{$value}#{$postfix}'), null), null);
}

// Dash Prepender (with validation)
// ------------------------------
// the same just prepend
@function __($value:null, $exception:default, $prefix: '-') {
  @return if($value!=$exception, if($value, unquote('#{$prefix}#{$value}'), null), null);
}


// Exclude value by name from list
// ------------------------------
@function remove-value($list, $value:null, $separator:auto)
{
  $output: () !global;
  //  @if $value {
  @each $val-of-first in $list {
    @if $val-of-first != $value {
      $output: append($output, $val-of-first, $separator) !global;
    }
  }

  @return $output;
  //  }
  //  @else {
  //    @return $list;
  //  }
}

// Remove value by index from list
// ------------------------------
@function remove($list, $index:null, $separator:auto)
{
  $output: () !global;
  @if $index {
    @each $val-of-first in $list {
      @if $val-of-first != $index {
        $output: append($output, $val-of-first, $separator) !global;
      }
    }

    @return $output;
  }
  @else {
    @return $list;
  }
}


// Check if word exists in the string
// ---------------------------------
// @return null if word doesn't exists else return 1
// or index of word (if length of word == 1)
@function str-exists($string, $word) {
  $word-length: str-length($word);

  @if $word-length <= str-length($string) {
    @if $word-length > 1 {
      $next: 0;
      @for $i from 1 through $word-length {
        $letter: str-slice($word, $i, $i);

        $curr: str-index($string, $letter);
        @if $curr == null {
          @return null;
        }

        @if $i > 1 and $next - $curr != -1 {
          @return null;
        }

        $next: str-index($string, $letter);
        @if $next == null {
          @return null;
        }

      }
      @return true;
    }

    @else if $word-length == 1 {
      @return str-index($string, $word);

    } @else {
      @return null;
    }
  }
}


// Grid Settings Calculator
// ------------------------------
// $columns - number of grid columns
// $calc-method - method based on what will be made calculation
// $calc-data - input data for calculation according to selected method
// @return list - 1:columns number, 2:column width, 3:gap width
@function calc-grid($columns, $calc-method, $calc-data)
{
  $column: null;
  $gap: null;

  // gaps By Padding
  @if $calc-method==column-gap {
    $px-column: nth($calc-data,1);
    $px-gap: nth($calc-data,2);
    $px-row: ($columns * $px-column) + ($px-gap * ($columns - 1));
    $percent-gap: percentage($px-gap/$px-row);

    $column: 100% / $columns;
    $gap: $percent-gap/2;
  }
  @else if $calc-method==gap {
    $gap: $calc-data;

    $column: 100% / $columns;
    $gap: $gap/2;
  }
  @else if $calc-method==column {
    $ratio: $calc-data;

    $column: 100% / $columns;
    $gap: (100% - ($ratio * $columns)) / $columns;
  }

  @return ($columns, $column, $gap);
}

// Unit Remover
// -------------------
@function ununit($value) {
  @if unitless($value)              { @return $value; }
  @else if unit($value) == '%'      { @return $value / 1%; }
  @else if unit($value) == 'px'     { @return $value / 1px; }
  @else if unit($value) == 'pt'     { @return $value / 1pt; }
  @else if unit($value) == 'em'     { @return $value / 1em; }
  @else if unit($value) == 'rem'    { @return $value / 1rem; }
}

// Unit Appender
// --------------------
@function setunit($value, $unit: integer) {
  @if $unit == integer              { @return ununit($value); }
  @else if $unit == '%'             { @return ununit($value)+0%; }
  @else if $unit == 'px'            { @return ununit($value)+0px; }
  @else if $unit == 'pt'            { @return ununit($value)+0pt; }
  @else if $unit == 'em'            { @return ununit($value)+0em; }
  @else if $unit == 'rem'           { @return ununit($value)+0rem; }
}

// Unit Converter (no rounding)
// ---------------------------
@function _tounit($value, $unit: null, $pixel-size: 16, $ppi-ratio: 72/96) {
  @if $unit {
    // px
    @if unit($value) == 'px' {
      @if $unit == '%'              { @return setunit($value * 100 / $pixel-size, '%'); }
      @else if $unit == 'px'        { @return $value; }
      @else if $unit == 'pt'        { @return setunit($value * $ppi-ratio, pt); }
      @else if $unit == 'em'        { @return setunit($value / $pixel-size, em); }
      @else if $unit == 'rem'       { @return setunit($value / $pixel-size, rem); }
      @else if $unit == 'unitless'  { @return setunit($value / $pixel-size); }
    }
    
    // percent
    @else if unit($value) == '%' {
      $value: round($value * $pixel-size/100) / ($pixel-size/100);
      @if $unit == '%'              { @return $value; }
      @else if $unit == 'px'        { @return setunit($value * $pixel-size/100, px); }
      @else if $unit == 'pt'        { @return setunit($value * $pixel-size/100 * $ppi-ratio, pt); }
      @else if $unit == 'em'        { @return setunit($value / 100, em); }
      @else if $unit == 'rem'       { @return setunit($value / 100, rem); }
      @else if $unit == 'unitless'  { @return setunit($value / 100); }
    }
    
    // em, rem, unitless
    @else if unit($value) == 'em' or unit($value) == 'rem' or unitless($value) {
      @if $unit == '%'              { @return setunit(ununit($value) * 100, '%'); }
      @else if $unit == 'px'        { @return setunit($value * $pixel-size, px); } //round?
      @else if $unit == 'pt'        { @return setunit(ununit($value) * $pixel-size * $ppi-ratio, pt); }
      @else if $unit == 'em'        { @return setunit($value, em); }
      @else if $unit == 'rem'       { @return setunit($value, rem); }
      @else if $unit == 'unitless'  { @return setunit($value); }
    }
    
    // pt
    @else if unit($value) == 'pt' {
      @if $unit == '%'              { @return setunit(ununit($value) / $ppi-ratio * 100/ununit($pixel-size), '%'); }
      @else if $unit == 'px'        { @return setunit(round($value / $ppi-ratio), px); }
      @else if $unit == 'pt'        { @return $value; }
      @else if $unit == 'em'        { @return setunit(ununit($value) / $ppi-ratio / $pixel-size, em); }
      @else if $unit == 'rem'       { @return setunit(ununit($value) / $ppi-ratio / $pixel-size, rem); }
      @else if $unit == 'unitless'  { @return setunit(ununit($value) / $ppi-ratio / $pixel-size); }
    }
    
    // if no unit detected just return
    @else {
      @return $value;
    }
  }
  @else {
    // if no unit presented just return
    @return $value;
  }
}

// Unit Converter (with rounding)
// ------------------------------
// Converts input $value to given $unit so that returned value
// become integer pixel at the end of browser rendering
// $value numeral - any CSS unit or unitless value (eg 100px, 1.4rem, 1.6, 7pt etc)
// $unit unit - any valid CSS unit (eg rem, '%', px, em etc)
@function tounit($value, $unit: null) {
  @return _tounit(round(_tounit($value, px)), $unit); //slow
  // @return _tounit($value, $unit); //fast
}
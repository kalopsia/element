// Clearfix
// -------------
// clearfix - is technique of overflow correction
// to block element containing float elements
@mixin clearfix()
{
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Font-Face
// -------------
@mixin font-face($font-family, $font-path, $font-weight: null, $font-style:null, $version:null, $svg-font-name:null)
{
  $query: if($version,'?v=#{$version}', null);
  @if $svg-font-name {
    @font-face {
      font-family: $font-family;
      font-weight: $font-weight;
      font-style: $font-style;
      src: url('#{$font-path}.eot#{$query}');
      src: url('#{$font-path}.eot?#iefix#{prepend-dash($version)}') format('embedded-opentype'),
      url('#{$font-path}.woff#{$query}') format('woff'),
      url('#{$font-path}.ttf#{$query}') format('truetype'),
      url('#{$font-path}.svg#{$query}##{$svg-font-name}') format('svg');
    }
  }
  @else { //@todo kill off
    @font-face {
      font-family: $font-family;
      src: url('#{$font-path}.eot#{$query}');
      src: url('#{$font-path}.eot?#iefix#{prepend-dash($query)}') format('embedded-opentype'),
      url('#{$font-path}.woff#{$query}') format('woff'),
      url('#{$font-path}.ttf#{$query}') format('truetype');
    }
  }
}

// Media Builder
// -------------
@mixin media($media-map, $media-name:null, $unit:$_media-unit, $no-query:null) {
  $string: ();
  $query: null;
  $query-type: null;

  //if query map is presented
  @if $media-name {
    $query: map-get($media-map, $media-name);
  }
  //if only media query is presented
  @else {
    $query: $media-map;
  }

  @if $query {
    @for $i from 1 through length($query) {
      $value: nth($query, $i);

      @if $i == 1 {
        $query-type: if($value==media, media, string);
      }
      $value: if(type-of($value)==number, tounit($value, $unit), unquote($value));
      $string: append($string, if($value!=media, $value, null));
    }

    @if $query-type==media {
      @media #{$string} {
        @content;
      }
    }
    @else {
      #{$string} & {
        @content;
      }
    }
  }
  @else {
    @content;
  }

}

// Property generator
// -------------------------------------
// $properties - any CSS property(es)
// $class-property-shortcut - CSS class prefix
// @return
@mixin _property($property-shortcut, $list, $device:null)
{
  $device-prefix: null;
  $device-postfix: null;
  $class-prefix: null;
  $class-postfix: null;
  $selector-before: (null);
  $selector-after: (null);

  //fist value always property(ies) name(s)
  $property: nth($list, 1);
  $property-list: nth($list, 2);

  $i: 1 !global;
  @while $i <= length($property-list) {

    $initial-value: nth($property-list, $i);
    // step _
    // --------
    // prepend/append/clean device name
    @if $initial-value == prefix {
      $device-prefix:_($device);
      $device-postfix:null;
      $i: $i + 1 !global;
    }
    @if $initial-value == postfix {
      $device-prefix:null;
      $device-postfix:__($device);
      $i: $i + 1 !global;
    }
    @else if $initial-value == unfix {
      $device-prefix:null;
      $device-postfix:null;
      $i: $i + 1 !global;
    }

    // step 0
    // ------
    // get selectors if presented
    $first-value: nth($property-list, $i);
    @if length($first-value) == 3 {
      $selector-before: nth($first-value, 1);
      $selector-after: nth($first-value, 3);
      $i: $i + 1 !global;
    }


    // step 1
    // ------
    // get class name
    $next-value: nth($property-list, $i);
    $i: $i + 1 !global;

    //if pre/postfix class names are presented
    @if length($next-value) == 2 {
      $class-prefix: #{nth($next-value, 1)}_;
      $class-postfix: nth($next-value, 2);
    }
    //if there is only class postfix
    @else {
      $class-prefix: null; //reset prefix
      $class-postfix: $next-value;
    }

    // step 2
    // ------
    // get property value
    $next-value: nth($property-list, $i);
    $i: $i + 1 !global;

    // append null for correct handling values within the loop
    $property-value: $next-value, null;

    // step 3
    // ------
    // construct class
    $class-shortcut: if($property-shortcut!=null and $class-postfix!=null, '#{$property-shortcut}-', $property-shortcut);
    $selector:
      #{$selector-before}#{'.'}#{$device-prefix}#{$class-prefix}#{$class-shortcut}#{$class-postfix}#{$device-postfix}#{$selector-after};

    #{$selector} {
      $value: $property-value;
      @each $property-name in $property {
        #{$property-name}: $value;
      }
    }

  }
}

// Class setter
// -------------------------------------
//
// @return
@mixin set($property-shortcut, $list, $media:null) {
  //@todo multi each $list in $args {}
  @if length($list) > 0 {

    @if $media {
      $property-name: nth($list, 1);
      $property-list: nth($list, 2);

      $media-devices: map-keys($media) !global;
      $devices: nths($media-devices, indexes($media-devices, map-keys($property-list)));

      @if length($devices) > 0 {
        @for $i from 1 through length($devices) {
          $device-name: nth($devices, $i);
          $device-property-list: map-get($property-list, $device-name);

          @include media($media, $device-name) {
            @include _property($property-shortcut, $property-name $device-property-list, $device-name);
          }
        }
      }
    }
    @else {
      @include _property($property-shortcut, $list);
    }

  }
}

// Class getter
// -------------------------------------
@function get($mixed-list, $class-name) {

  $property-list: nth($mixed-list, 1); //list with property name
  $property-list: nth($property-list, 2); //list without property name
  $property-device: nth($mixed-list, 2);

  $list: if($property-device and $property-device != _, map-get($property-list, $property-device), $property-list);

  $i: 1 !global;
  @while $i <= length($list) {

    $initial-value: nth($list, $i);
    // step _
    // --------
    // prepend/append/clean device name
    @if $initial-value == prefix {
      $i: $i + 1 !global;
    }
    @if $initial-value == postfix {
      $i: $i + 1 !global;
    }
    @else if $initial-value == unfix {
      $i: $i + 1 !global;
    }

    // step 0
    // ------
    // get selectors if presented
    $first-value: nth($list, $i);
    @if length($first-value) == 3 {
      $i: $i + 1 !global;
    }

    // step 1
    // ------
    // get class name
    $class-value: nth($list, $i);
    $i: $i + 1 !global;

    // step 2
    // ------
    // get property value
    $property-value: nth($list, $i);
    $i: $i + 1 !global;

    // step 3
    // ------
    // return property and value
    @if $class-value == $class-name {
      @return $property-value;
    }
  }
  @return null;
}



// Property and value setter
// -------------------------------------
@mixin property-value($args...) {
  $c: 1 !global;
  @while $c <= length($args) {

    //get property name, list value, etc
    $mixed-list: nth($args, $c);
    $property-list: nth($mixed-list, 1);
    $property-name: nth($property-list, 1);

    //get class name for searching value
    $class-name: nth($args, $c + 1);

    //output CSS property
    #{$property-name}: get($mixed-list, $class-name);

    $c: $c + 2 !global;
  }
}

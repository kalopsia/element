// Media Builder
// -------------
// $media-map map - map where key is name of query, value is the query itself. Example:
//    $media-map: (
//       mobile:   media '(screen and (max-width: 740px )',
//       touch:    '.touch',
//       ^name     ^query
//    );
// $media-name string - key of corresponding key-value pair in $media-map. Example: mobile or touch
// $unit unit - convert numbers are presented in query in accordance with $unit
@mixin media($media-map, $media-name, $unit:$_media-unit) {
  // if media map is not null
  @if $media-map {
    // get query with the associated name
    $query: map-get($media-map, $media-name);

    // if query is presented in the map
    @if $query {
      $query-string: ();
      $query-type: null;
      
      // fetch query string from key's value
      @for $i from 1 through length($query) {
        $value: nth($query, $i);
        // if first item in the query list is keyword 'media' the content must be under @media rule
        // else under simple CSS selector, like .myclass { @content; }
        @if $i == 1 { $query-type: if($value==media, media, selector); }
        
        // if query's item is number - convert it according to $unit unit
        $value: if(type-of($value)==number, tounit($value, $unit), unquote($value));
        
        // fetch string
        $query-string: append($query-string, if($value!=media, $value, null));
      }

      @if $query-type == media {
        @media #{$query-string} { @content; }
      } 
      @else if $query-type == selector{
        #{$query-string} &      { @content; }
      }
      
    // render content with no query
    } @else {
      @content;
    }
  }

}

// Class-property Generator (implements set mixin)
// -----------------------------------------------
// $property-shortcut string - class prefix for for given CSS property. Example: clr (CSS color)
// $property-set list - list of class name & CSS value pairs. Example:
//    $color-set: color ( <- color = valid CSS property name
//        black, #333,
//        white, #fdfdfd,
//        ^name  ^value
//      )
//    );
// @render one or more statement like selector { property: value }. Example:
//    .clr-black {color: #333;} .clr-white {color: #fdfdfd;}
@mixin _property($property-shortcut, $property-set, $device:null) {
  $device-prefix: null;
  $device-postfix: null;
  $class-prefix: null;
  $class-postfix: null;
  $selector-before: (null);
  $selector-after: (null);

  //fist value always property name(s)
  $property: nth($property-set, 1);
  $property-set: nth($property-set, 2);

  $i: 1 !global;
  @while $i <= length($property-set) {

    $initial-value: nth($property-set, $i);
    // step _
    // --------
    // prepend/append/clean device name
    @if $initial-value == prefix {
      $device-prefix:_($device);
      $device-postfix:null;
      $i: $i + 1 !global;
    }
    @if $initial-value == postfix {
      $device-prefix:null;
      $device-postfix:__($device);
      $i: $i + 1 !global;
    }
    @else if $initial-value == unfix {
      $device-prefix:null;
      $device-postfix:null;
      $i: $i + 1 !global;
    }

    // step 0
    // ------
    // get selectors if presented
    $first-value: nth($property-set, $i);
    @if length($first-value) == 3 {
      $selector-before: nth($first-value, 1);
      $selector-after: nth($first-value, 3);
      $i: $i + 1 !global;
    }


    // step 1
    // ------
    // get class name
    $next-value: nth($property-set, $i);
    $i: $i + 1 !global;

    //if pre/postfix class names are presented
    @if length($next-value) == 2 {
      $class-prefix: #{nth($next-value, 1)}_;
      $class-postfix: nth($next-value, 2);
    }
    //if there is only class postfix
    @else {
      $class-prefix: null; //reset prefix
      $class-postfix: $next-value;
    }

    // step 2
    // ------
    // get property value
    $next-value: nth($property-set, $i);
    $i: $i + 1 !global;

    // append null for correct handling values within the loop
    $property-value: $next-value, null;

    // step 3
    // ------
    // construct class
    $class-shortcut: if($property-shortcut!=null and $class-postfix!=null, '#{$property-shortcut}-', $property-shortcut);
    $selector:
      #{$selector-before}#{'.'}#{$device-prefix}#{$class-prefix}#{$class-shortcut}#{$class-postfix}#{$device-postfix}#{$selector-after};

    #{$selector} {
      $value: $property-value;
      @each $property-name in $property {
        #{$property-name}: $value;
      }
    }

  }
}

// Class setter
// -------------------------------------
// $property-shortcut string - pass to _property mixin (see above)
// @todo add '%' and '.'
// @render
@mixin set($property-shortcut, $list, $media-map:null) {
  @if length($list) > 0 {

    @if $media-map {
      $property-name: nth($list, 1);
      $property-list: nth($list, 2);

      $media-devices: map-keys($media-map) !global;
      $property-devices: nths($media-devices, indexes($media-devices, map-keys($property-list)));

      @if length($property-devices) > 0 {
        @for $i from 1 through length($property-devices) {
          $device-name: nth($property-devices, $i);
          $device-property-list: map-get($property-list, $device-name);

          @include media($media-map, $device-name) {
            @include _property($property-shortcut, $property-name $device-property-list, $device-name);
          }
        }
      }
    }
    @else {
      @include _property($property-shortcut, $list);
    }

  }
}

// Class getter
// -------------------------------------
// @todo
@function get($mixed-list, $class-name) {
  $property-list: nth($mixed-list, 1); //list with property name
  $property-list: nth($property-list, 2); //list without property name
  $property-device: nth($mixed-list, 2);

  $list: if($property-device and $property-device != _, map-get($property-list, $property-device), $property-list);

  $i: 1 !global;
  @while $i <= length($list) {

    $initial-value: nth($list, $i);
    // step _
    // --------
    // prepend/append/clean device name
    @if $initial-value == prefix {
      $i: $i + 1 !global;
    }
    @if $initial-value == postfix {
      $i: $i + 1 !global;
    }
    @else if $initial-value == unfix {
      $i: $i + 1 !global;
    }

    // step 0
    // ------
    // get selectors if presented
    $first-value: nth($list, $i);
    @if length($first-value) == 3 {
      $i: $i + 1 !global;
    }

    // step 1
    // ------
    // get class name
    $class-value: nth($list, $i);
    $i: $i + 1 !global;

    // step 2
    // ------
    // get property value
    $property-value: nth($list, $i);
    $i: $i + 1 !global;

    // step 3
    // ------
    // return property and value
    @if $class-value == $class-name {
      @return $property-value;
    }
  }
  @return null;
}


// Property and value setter
// -------------------------------------
// @todo
@mixin property-value($args...) {
  $c: 1 !global;
  @while $c <= length($args) {

    //get property name, list value, etc
    $mixed-list: nth($args, $c);
    $property-list: nth($mixed-list, 1);
    $property-name: nth($property-list, 1);

    //get class name for searching value
    $class-name: nth($args, $c + 1);

    //output CSS property
    #{$property-name}: get($mixed-list, $class-name);

    $c: $c + 2 !global;
  }
}


// Clearfix
// -------------
// clearfix - is technique of overflow correction
// to block element containing float elements
@mixin clearfix() {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
  // (deprecated)
  // &:before,
  // &:after {
  //   content: " ";
  //   display: table;
  // }
  // &:after {
  //   clear: both;
  // }
}

// Font-Face
// -------------
// Generate bulletproof @font-face rule for your custom fonts.
@mixin font-face($font-family, $font-path, $font-weight: null, $font-style:null, $version:null, $svg-font-name:null) {
  $query: if($version,'?v=#{$version}', null);
  $add-query: if($version,'&v=#{$version}', null);
  @font-face {
    font-family: $font-family;
    font-weight: $font-weight;
    font-style: $font-style;
    src: url('#{$font-path}.eot#{$query}');
    src: url('#{$font-path}.eot?#iefix#{$add-query}') format('embedded-opentype'),
    url('#{$font-path}.woff#{$query}') format('woff'),
    url('#{$font-path}.ttf#{$query}') format('truetype')
    // add path to svg font if presented
    if($svg-font-name, unquote(",url('#{$font-path}.svg#{$query}##{$svg-font-name}') format('svg')"), null);
  }
}
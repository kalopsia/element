// MAKE EASY THINGS DIFFICULT.
// PLEASE DO NOT READ THIS IF YOU HAVE POOR SASS KNOWLEADGE
// AND HAVEN'T READ ANY DOCUMENTATION!
// You may never use this file if it confuse you.

// Default Variables
// --------------------------------------------------

  $vr-font-size: $_font-size !default;
  //new line jumping threshold
  $vr-font-threshold: 84% !default; //%

  //values for calculatings
  $vr-line-height: ununit(tounit($_line-height, rem)) !default;
  //$vr-line-height:    ununit(round(tounit($line-height, px))/16) !default;
  $vr-line-pitch: 0.5 !default;

  //output unit rendering
  $vr-unit: rem !default; //rem, px, pt

  //unit fallback
  $vr-unit-fallback: false !default;


// Mixins & Functions
// --------------------------------------------------

  // Line Magnet (explain)
  // -----------------------------
  // $line-height must be prepared in advance
  @function vr-line-sticker($value, $line-height: $vr-line-height, $pitch:$vr-line-pitch, $font:false)
  {
    $value: ununit(tounit($value, rem));
    //-------------
    $ratio: ceil($value / $line-height);
    $calc: $line-height * ($ratio - 1) + ($line-height * $pitch);
    $return: if($calc <= $value, $ratio, $ratio - $pitch);

    //-------------
    @return $return;
  }

  // New Line Calculator (explain)
  // -----------------------------
  @function vr-lines-by-font($font-size, $line-height: $vr-line-height, $threshold: $vr-font-threshold)
  {
    $font-size: ununit(tounit($font-size, rem));
    $threshold: ununit($threshold);

    @return ceil( $font-size / ($line-height * ($threshold/100)) );
  }

  // VR Value Handler
  // -----------------------------
  // handle each value and synchronize to vertical rhythm
  @function vr-value-handler($value, $unit, $font, $vr)
  {
    //calculate number of lines
    @if type-of($value) == number and $value!=0 {
      @if unitless($value) {
        $value: if($font, $value, $value * $vr-line-height);
        @return tounit($value, $unit);
      }
      @else {
        @if $vr {
          $value: if($font, $value, vr-line-sticker($value) * $vr-line-height);
          @return tounit($value, $unit);
        }
        @else {
          @debug $value;
          @return $value; //pass
        }
      }
    }
    //calculate number of lines by font size
    @else if $value==auto and type-of($font)==number {
      @if $vr {
        $lines-number: vr-lines-by-font($font);
        @return tounit($lines-number * $vr-line-height, $unit);
      }
      @else {
        @return null; //pass
      }
    }
    //!important
    @else if $value == important {
      @return unquote('!'+$value);
    }
    @return $value;

  }

  // Return VR Value
  // -----------------------------
  // only expose list values and pass through vr handler function
  @function vr($list, $unit: $vr-unit, $font:false, $vr:$_vr)
  {
    $values: ();

    @each $value in $list {
      $value: vr-value-handler($value, $unit, $font, $vr);
      $values: append($values, $value);
    }

    @return $values;
  }


  // VR Property
  // -----------------------------
  @mixin vr-property($property, $list, $unit: $vr-unit, $font:false, $vr:$_vr, $fallback: $vr-unit-fallback) {
    @if $property==font-size {
      $font: true;
    }

    @if $fallback and $unit!=px {
      #{$property}: vr($list, px, $font);
    }

    //#{$property}: if($offset == null, calc(#{$value} + #{$offset}), $value);
    $value: vr($list, $unit, $font, $vr);
    #{$property}: $value;
  }
@import '../globals.scss';
@import '../naming.scss';
@import '../functions.scss';
@import '../mixins.scss';

// Default Variables
// --------------------------------------------------
  $grid: true !default;

  // Grid Parameters
  // -------------------
  $grid-type: flexbox !default; // flexbox, float
  $grid-row-modes: gutter, columned !default;

  $grid-params: calc-grid(12, gap, 1.5%) !default;
  $grid-media-params: (
    default: $grid-params,
    laptop: $grid-params,
    tablet: $grid-params,
    mobile: $grid-params,
  ) !default;

  // Grid Composition
  // -------------------
  $grid-set: (
    default: (columns, offsets, pushes, pulles),
    laptop: (columns, offsets, pushes, pulles),
    tablet: (columns, offsets, pushes, pulles),
    mobile: (columns, offsets, pushes, pulles),
  ) !default;


// Mixins & Functions
// --------------------------------------------------

  // Grid Elements
  // ---------------------------
  // $params list - contains 3 grid parameters: 1:columns number, 2:column widthÐ± 3:gap width.
  // For simplicity, $params should be generated by calc-grid() function.
  // $element string - name of grid element, whose styles represent its behaviour. Names start
  // with _ initialize base styles (only once) and the other can be used many times under @media rule
  @mixin grid($element, $params:null, $i:1, $type: $grid-type) {
    $column-width: null;
    $gap-width: null;
    $columns: null;
    @if length($params) > 1 {
      $columns:       nth($params, 1);
      $column-width:  nth($params, 2);
      $gap-width:     nth($params, 3);
    }

    // Row Types
    // --------------------
    @if $element==_row-float and index($type, flexbox) {
      display: block;
      padding: 0;
      box-sizing: border-box;
      @include clearfix();
    }
    @else if $element==_row-flexbox and index($type, flexbox) {
      display: flex;
      padding: 0;
      box-sizing: border-box;
      flex-wrap: if($_left == left, wrap, wrap-reverse);
    }
    @else if $element==row-indent {
      margin-#{$_left}: -$gap-width * 2;
    }

    // Column Types
    // --------------------
    @else if $element==_column-float and index($type, float) {
      float: $_left;
      display: block;
      box-sizing: border-box;
      min-height:1px; // no folding on empty column
    }
    @else if $element==_column-flexbox and index($type, flexbox) {
      display: flex;
      box-sizing: border-box;
      flex-direction: column; // full width of elements inside
      flex:0 1 auto; // no folding on empty column
      min-height:1px; // no folding on empty column
    }
    @else if $element==column-width-float and index($type, float) {
      width: if($i==0, auto, $column-width * $i);
    }
    @else if $element==column-width-flexbox and index($type, flexbox) {
      flex-basis: if($i==0, auto, $column-width * $i);
      max-width: if($i==0, none, $column-width * $i);
    }
    @else if $element==column-indent {
      padding-#{$_left}: $gap-width * 2;
    }

    // Column Manipulators
    // ---------------------
    @else if $element==column-offset {
      margin-#{$_left}: $column-width * $i;
    }
    @else if $element==column-unoffset {
      margin-#{$_left}: 0;
      margin-#{$_right}: 0;
    }
    @else if $element==column-push {
      #{$_left}: $column-width * $i;
      #{$_right}: auto;
    }
    @else if $element==column-pull {
      #{$_right}: $column-width * $i;
      #{$_left}: auto;
    }
    @else if $element==column-unpush or $element==column-unpull{
      left:auto;
      right:auto;
    }
    @else if $element==column-centred {
      margin-#{$_left}: auto;
      margin-#{$_right}: auto;
    }
    @else if $element==column-uncentred {
      margin-#{$_left}: 0; //or nothing
      margin-#{$_right}: 0;
    }
  }


// Output Styles
// --------------------------------------------------
@if $grid {

  // Initialise Grid
  // ---------------
  // float row
  .-float                               { @include grid(_row-float); } //.-float.row
  .-float.row-reverse > [class*="col-"] { float: right;}
  .-float.column > [class*="col-"]      { clear: both;}
  .-float > [class*="col-"]             { @include grid(_column-float); }

  // flexbox row
  .-flex          { @include grid(_row-flexbox); }
  [class*="col-"] { @include grid(_column-flexbox); }

  // columned mode - automatically breaks child elements on columns
  @if index($grid-row-modes, columned) {
    .-columned            { list-style:none; }
    .-float.-columned > * { @include grid(_column-float); }
    .-flex.-columned > *  { @include grid(_column-flexbox); }
  }
  
  // gutter mode - defines gutters between columns
  @if index($grid-row-modes, gutter) {
    .-gutter { position: relative; }
  }

  $grid-media-list: nths(map-keys($_media), indexes(map-keys($_media), map-keys($grid-set)));

  // go through each device (@media rule)
  @for $f from 1 through length($grid-media-list) {
    $media-name:   nth($grid-media-list, $f);
    $params: map-get($grid-media-params, $media-name);
    $prefix: _($media-name);

    @include media($_media, $media-name) {
      // Columns & Rows Modes
      // --------------------
      // row and column modes
      // @todo .-float
      .#{$prefix}row            {flex-direction: row;}
      .#{$prefix}row-reverse    {flex-direction: row-reverse;}
      .#{$prefix}column         {flex-direction: column;}
      .#{$prefix}column-reverse {flex-direction: column-reverse;}
      .#{$prefix}nowrap         {flex-wrap: nowrap;}

      // gutter mode
      @if index($grid-row-modes, gutter) {
        .-gutter                    { @include grid(row-indent, $params); }
        .-gutter > [class*="col-"]  { @include grid(column-indent, $params); }
        @if index($grid-row-modes, columned) {
          .-gutter.-columned > * { @include grid(column-indent, $params); }
        }
      }

      @if index(map-get($grid-set, $media-name), columns) {
        // Column Width
        // ------------
        @for $i from 0 through nth($params, 1) {
          $idx: if($i == 0, 'auto', $i);
          .-float > .#{$prefix}col-#{$idx}  { @include grid(column-width-float, $params, $i); }
          .#{$prefix}col-#{$idx}   { @include grid(column-width-flexbox, $params, $i); }
          @if index($grid-row-modes, columned) {
            .-float.-columned.#{$prefix}cols-#{$idx} > *  { @include grid(column-width-float, $params, $i); }
            .-flex.-columned.#{$prefix}cols-#{$idx} > *   { @include grid(column-width-flexbox, $params, $i); }
          }
        }

        // Column Centering
        // ----------------
        // column centering for both float and flexbox
        .#{$prefix}main-center    { @include grid(column-centred); }
        .#{$prefix}main-uncenter  { @include grid(column-uncentred); }
        .#{$prefix}center         {
          @include grid(column-centred);
          align-self: center;
        }
        .#{$prefix}uncenter         {
          @include grid(column-uncentred);
          align-self: auto;
        }
        
        // float type additions
        @if index($grid-type, float) {
          .-float > .#{$prefix}main-center   { float:none; }
          .-float > .#{$prefix}main-uncenter { float:$_left; }
        }
      }

      // Offsets
      // ----------
      @if index(map-get($grid-set, $media-name), offsets) {
        @for $i from 1 through nth($params, 1) {
          .#{$prefix}offset-#{$i} { @include grid(column-offset, $params, $i); }
        }
        .#{$prefix}unoffset { @include grid(column-unoffset); }
      }

      // Push
      // --------
      @if index(map-get($grid-set, $media-name), pushes) {
        [class*="push-"] { position: relative; }
        @for $i from 1 through nth($params, 1) {
          .#{$prefix}push-#{$i} { @include grid(column-push, $params, $i); }
        }
        .#{$prefix}unpush { @include grid(column-unpush); }
      }

      // Pull
      // -------
      @if index(map-get($grid-set, $media-name), pulls) {
        [class*="pull-"] { position: relative; }
        @for $i from 1 through nth($params, 1) {
          .#{$prefix}pull-#{$i} { @include grid(column-pull, $params, $i); }
        }
        .#{$prefix}unpull { @include grid(column-unpull); }
      }
    }
  }

} $grid: false;
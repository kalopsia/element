@import '../globals.scss';
@import '../naming.scss';
@import '../functions.scss';
@import '../mixins.scss';

//@todo variable prefixes
//@todo .row.-floatless > [class*="column-"] {float:none;}

// Default Variables
// --------------------------------------------------
  $grid: true !default;

  $grid-exclude: false !default;
  $grid-include: diff-list((
      container, column, column-gapless, column-push, column-pull, column-offset, column-center, column-stretch
      ), $grid-exclude) !default;

  // Container
  // -------------------
  $grid-container: (
    params: (940px, 940px, 700px, 100%),
    media: (default, laptop, tablet, mobile),
  ) !default;

  // Grid Parameters
  // -------------------
  $grid-calc-data: (
    columns: 12,
    calc-method: column-gap,
    calc-data: (60px, 20px),
  ) !default;

  $grid-params: (
    grid-params($grid-calc-data...),
    grid-params($grid-calc-data...),
    grid-params($grid-calc-data...),
    grid-params($grid-calc-data...),
  ) !default;

  // Grid Composition
  // -------------------
  $grid-set: (
    columns: (default, laptop, tablet, mobile),
    offset: (default, laptop, tablet, mobile),
    push: (default, laptop, tablet, mobile),
    pull: (default, laptop, tablet, mobile),
    triggers: (default, laptop, tablet, mobile),
  ) !default;


// Mixins & Functions
// --------------------------------------------------

  // Grid Elements
  // ---------------------------
  // $parameters list contains all useful grid parameters
  // and must be generated by grid-params
  // types are started by _ initialize base styles for this type
  @mixin grid($type, $params:null, $i:1) {
    $column-width: null;
    $gap-width: null;
    $columns: null;

    @if length($params) > 1 {
      $columns:       nth($params, 1);
      $column-width:  nth($params, 2);
      $gap-width:     nth($params, 3);
    }

    // Container
    // --------------------
    @if $type==_container {
      position: relative;
      margin-#{$_left}: auto;
      margin-#{$_right}: auto;
      @include clearfix();
    }

    @else if $type==container {
      width: $params;
    }

    // Row Types
    // --------------------
    @else if $type==_row {
      position: relative;
      @include clearfix();
    }

    @else if $type==row {
      width: 100% + ($gap-width * 2.04);
      margin-#{$_left}: -$gap-width + (-$gap-width * 0.0);
    }

    @else if $type==row-gapless {
      width: 100%;
      margin-#{$_left}: 0;
    }

    //columned row
    @else if $type==_row-columned {
      & > * {
        float:$_left;
        display:block;
        list-style:none;
        min-height:1px;
        position:relative;
      }
    }

    @else if $type==row-columned {
      & > * {
        padding-#{$_left}: $gap-width;
        padding-#{$_right}: $gap-width;
      }
    }


    @else if $type==row-columned-gapless {
      & > * {
        padding-#{$_left}: 0;
        padding-#{$_right}: 0;
      }
    }

    // Column Types
    // --------------------
    @else if $type==_column {
      min-height:1px;
      float: $_left;
      position: relative;
      display: block;
    }
    @else if $type==column-width {
      width: if($i==0, auto, $column-width * $i);
    }
    @else if $type==column-indents {
      padding-#{$_left}: $gap-width;
      padding-#{$_right}: $gap-width;
    }
    @else if $type==column-indents-gapless {
      padding-#{$_left}: 0;
      padding-#{$_right}: 0;
    }


    // Column Manipulators
    // ---------------------
    @else if $type==column-offset {
      margin-#{$_left}: $column-width * $i;
    }
    @else if $type==column-unoffset {
      margin-#{$_left}: 0;
      margin-#{$_right}: 0;
    }

    @else if $type==column-push {
      #{$_left}: $column-width * $i;
      #{$_right}: auto;
    }
    @else if $type==column-pull {
      #{$_right}: $column-width * $i;
      #{$_left}: auto;
    }
    @else if $type==column-unpush or $type==column-unpull{
      left:auto;
      right:auto;
    }

    @else if $type==column-center {
      margin-#{$_left}: auto;
      margin-#{$_right}: auto;
      float:none;
    }
    @else if $type==column-uncentred {
      margin-#{$_left}: 0; //or nothing
      margin-#{$_right}: 0;
      float:$_left;
    }

    @else if $type==column-opposite {
      float:if($_left==left, right, left);
    }
//    @else if $type==column-uncentred {
//      float:$_left;
//    }

    @else if $type==column-stretch { //@todo leave or not
      width: $column-width * $columns; //!important
      float: none; //!important //@think
      right: auto;
      left: auto;
      margin-left: 0;
      margin-right: 0;
    }

  }


// Output Styles
// --------------------------------------------------
@if $grid {

  // Container
  // ---------
  @if in-list(container, $grid-include) {
    $container-devices:
      nths(map-keys($_media), indexes(map-keys($_media), map-get($grid-container, media)));
    $container-params:
      nths(map-get($grid-container, params), indexes(map-get($grid-container, media), $container-devices));

    // Initiate container once
    .container {@include grid(_container);}

    @for $f from 1 through length($container-devices) {
      $device: nth($container-devices, $f);
      $value: nth($container-params, $f);

      @include media($_media, $device) {
        .container {@include grid(container, $value);}
      }
    }
  }

  // Columns
  // ---------
  $column-devices:
    nths(map-keys($_media), indexes(map-keys($_media), map-get($grid-set, columns)));
  $column-params:
    nths($grid-params, indexes(map-get($grid-set, columns), $column-devices));

  @if in-list(column, $grid-include) {

    // Initiate gappy behaviors
    .row {
      @include grid(_row);
    }
    [class*="col-"] {
      @include grid(_column);
    }
    .row.-columned {
      @include grid(_row-columned);
    }

    // Initiate gapless behaviors
    @if in-list(column-gapless, $grid-include) {
      .row.-gapless {
        @include grid(row-gapless);
      }
      .row.-gapless > [class*="col-"] {
        @include grid(column-indents-gapless);
      }
      .row.-columned.-gapless {
        @include grid(row-columned-gapless);
      }

    }

    @for $f from 1 through length($column-devices) {
      $params: nth($column-params, $f);
      $device: nth($column-devices, $f);
      $prefix: _($device);

      @include media($_media, $device) {
        .row {
          @include grid(row, $params);
        }
        [class*="col-"] {
          @include grid(column-indents, $params);
        }
        .row.-columned {
          @include grid(row-columned, $params);
        }

        @for $i from 0 through nth($params, 1) {
          $index: if($i == 0, 'auto', $i);
          .#{$prefix}by-#{$index} > * {@include grid(column-width, $params, $i);}
          .#{$prefix}col-#{$index} {@include grid(column-width, $params, $i);}
        }
      }
    }
  }

  // Column Offset
  // -------------
  @if in-list(column-offset, $grid-include) {
    $offset-devices: nths($column-devices, indexes($column-devices, map-get($grid-set, offset)));
    $offset-params: nths($column-params, indexes($column-devices, $offset-devices));

    @for $f from 1 through length($offset-devices) {
      $params: nth($offset-params, $f);
      $device: nth($offset-devices, $f);
      $prefix: _($device);

      @include media($_media, $device) {
        @for $i from 1 through nth($params, 1) {
          .#{$prefix}offset-#{$i} {
            @include grid(column-offset, $params, $i);
          }
        }
        .#{$prefix}unoffset {@include grid(column-unoffset);}
      }
    }
  }

  // Column Push
  // ------------
  @if in-list(column-push, $grid-include) {
    $push-devices: nths($column-devices, indexes($column-devices, map-get($grid-set, push)));
    $push-params: nths($column-params, indexes($column-devices, $push-devices));

    @for $f from 1 through length($push-devices) {
      $params: nth($push-params, $f);
      $device: nth($push-devices, $f);
      $prefix: _($device);

      @include media($_media, $device) {
        @for $i from 1 through nth($params, 1) {
          .#{$prefix}push-#{$i} {
            @include grid(column-push, $params, $i);
          }
        }
        .#{$prefix}unpush {@include grid(column-unpush);}
      }
    }
  }


  // Column Pull
  // -----------
  @if in-list(column-pull, $grid-include) {
    $pull-devices: nths($column-devices, indexes($column-devices, map-get($grid-set, pull)));
    $pull-params: nths($column-params, indexes($column-devices, $pull-devices));

    @for $f from 1 through length($pull-devices) {
      $params: nth($pull-params, $f);
      $device: nth($pull-devices, $f);
      $prefix: _($device);

      @include media($_media, $device) {
        @for $i from 1 through nth($params, 1) {
          .#{$prefix}pull-#{$i} {
            @include grid(column-pull, $params, $i);
          }
        }
        .#{$prefix}unpull {@include grid(column-unpull);}
      }
    }
  }

  // Column Triggers
  // ---------------
  $triggers-devices: nths($column-devices, indexes($column-devices, map-get($grid-set, triggers)));
  $triggers-params: nths($column-params, indexes($column-devices, $triggers-devices));

  @for $f from 1 through length($triggers-devices) {
    $device: nth($triggers-devices, $f);
    $params: nth($triggers-params, $f);
    $prefix: _($device);

    @include media($_media, $device) {
      @if in-list(column-center, $grid-include) {
        .#{$prefix}center {@include grid(column-center);}
        .#{$prefix}uncenter {@include grid(column-uncentred);}
      }
      @if in-list(column-center, $grid-include) {
        $postfix: if($_left==left, right, left);
        .row .#{$prefix}#{$postfix}
        {@include grid(column-opposite);}
      }

      @if in-list(column-stretch, $grid-include) {
        .#{$prefix}stretch {@include grid(column-stretch, $params);}
      }

    }
  }

} $grid: false;